import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
from PIL import Image, ImageTk, ImageDraw
import math
import json
import os

class EcocardioApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Software de Informes Ecocardiográficos")
        self.root.geometry("1200x800")
        
        # Variables de estado
        self.image_path = None
        self.measurements = {}
        self.calculations = {}
        self.report_text = ""
        
        # Crear pestañas
        self.notebook = ttk.Notebook(root)
        self.tab_image = ttk.Frame(self.notebook)
        self.tab_measurements = ttk.Frame(self.notebook)
        self.tab_report = ttk.Frame(self.notebook)
        
        self.notebook.add(self.tab_image, text="Medición")
        self.notebook.add(self.tab_measurements, text="Datos")
        self.notebook.add(self.tab_report, text="Reporte")
        self.notebook.pack(expand=True, fill="both")
        
        # Configuración de la pestaña de imagen
        self.setup_image_tab()
        
        # Configuración de la pestaña de datos
        self.setup_measurements_tab()
        
        # Configuración de la pestaña de reporte
        self.setup_report_tab()
        
        # Cargar fórmulas predefinidas
        self.formulas = {
            "SC (m2)": lambda: ((self.measurements.get('Peso (kg)', 0)**0.425) * 
                                (self.measurements.get('Alt (cm)', 0)**0.725)) * 0.007184,
            "Masa (g)": lambda: 0.8*(1.04*((self.measurements.get('SIVd (cm)', 0) + 
                                           self.measurements.get('DVId (cm)', 0) + 
                                           self.measurements.get('PPVId (cm)', 0))**3 - 
                                      self.measurements.get('DVId (cm)', 0)**3) + 0.6,
            "FEVI (%)": lambda: ((self.measurements.get('VFD (ml)', 0) - 
                                  self.measurements.get('VFS (ml)', 0)) / 
                                 self.measurements.get('VFD (ml)', 1)) * 100,
            # Agrega aquí más fórmulas según tu Excel
        }
        
        # Cargar valores normales
        self.normal_values = {
            "SIVd (cm)": "H:0.6-1.0 F:0.6-0.9cm",
            "DVId (cm)": "H:4.2-5.8 F:3.8-5.2cm",
            "Masa (g)": "H:88-224 F:67-162g",
            "FEVI (%)": "H:>52% F:>54%",
            # Agrega aquí más valores normales
        }
    
    def setup_image_tab(self):
        # Frame para controles
        control_frame = ttk.Frame(self.tab_image)
        control_frame.pack(fill="x", padx=10, pady=5)
        
        # Botones
        btn_load = ttk.Button(control_frame, text="Cargar Imagen/Video", command=self.load_image)
        btn_load.pack(side="left", padx=5)
        
        btn_calibrate = ttk.Button(control_frame, text="Calibrar Escala", command=self.calibrate_scale)
        btn_calibrate.pack(side="left", padx=5)
        
        # Canvas para mostrar la imagen
        self.canvas = tk.Canvas(self.tab_image, bg="gray")
        self.canvas.pack(fill="both", expand=True)
        
        # Variables para medición
        self.start_x = None
        self.start_y = None
        self.line_id = None
        self.calibration_factor = 1.0  # pixeles por mm
        self.calibrated = False
        
        # Eventos del mouse
        self.canvas.bind("<ButtonPress-1>", self.on_press)
        self.canvas.bind("<B1-Motion>", self.on_drag)
        self.canvas.bind("<ButtonRelease-1>", self.on_release)
    
    def setup_measurements_tab(self):
        # Frame principal
        main_frame = ttk.Frame(self.tab_measurements)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Lista de mediciones
        ttk.Label(main_frame, text="Mediciones:").grid(row=0, column=0, sticky="w")
        self.measurement_list = tk.Listbox(main_frame, width=30, height=15)
        self.measurement_list.grid(row=1, column=0, rowspan=4, sticky="nsew", padx=(0, 10))
        
        # Controles de medición
        btn_frame = ttk.Frame(main_frame)
        btn_frame.grid(row=1, column=1, sticky="nw")
        
        ttk.Button(btn_frame, text="Agregar Medición", 
                  command=self.add_measurement).pack(fill="x", pady=2)
        ttk.Button(btn_frame, text="Editar Medición", 
                  command=self.edit_measurement).pack(fill="x", pady=2)
        ttk.Button(btn_frame, text="Eliminar Medición", 
                  command=self.delete_measurement).pack(fill="x", pady=2)
        ttk.Button(btn_frame, text="Calcular Parámetros", 
                  command=self.calculate_parameters).pack(fill="x", pady=10)
        
        # Lista de cálculos
        ttk.Label(main_frame, text="Cálculos:").grid(row=0, column=2, sticky="w")
        self.calculation_list = tk.Listbox(main_frame, width=40, height=15)
        self.calculation_list.grid(row=1, column=2, rowspan=4, sticky="nsew")
        
        # Configurar expansión
        main_frame.columnconfigure(0, weight=1)
        main_frame.columnconfigure(2, weight=2)
        main_frame.rowconfigure(1, weight=1)
    
    def setup_report_tab(self):
        # Área de texto para el reporte
        self.report_text = tk.Text(self.tab_report, wrap="word")
        self.report_text.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Botones
        btn_frame = ttk.Frame(self.tab_report)
        btn_frame.pack(fill="x", padx=10, pady=5)
        
        ttk.Button(btn_frame, text="Generar Reporte", 
                  command=self.generate_report).pack(side="left")
        ttk.Button(btn_frame, text="Guardar Reporte", 
                  command=self.save_report).pack(side="left", padx=5)
        ttk.Button(btn_frame, text="Copiar al Portapapeles", 
                  command=self.copy_to_clipboard).pack(side="right")
    
    def load_image(self):
        file_path = filedialog.askopenfilename(
            filetypes=[("Archivos de Imagen/Video", "*.jpg *.jpeg *.png *.avi *.mp4")])
        if file_path:
            self.image_path = file_path
            try:
                if file_path.lower().endswith(('.avi', '.mp4')):
                    # Aquí iría el código para manejar videos
                    messagebox.showinfo("Video Cargado", 
                                      f"Video cargado: {os.path.basename(file_path)}\n"
                                      "Seleccione un fotograma para medición")
                else:
                    # Cargar imagen estática
                    self.image = Image.open(file_path)
                    self.tk_image = ImageTk.PhotoImage(self.image)
                    self.canvas.create_image(0, 0, anchor="nw", image=self.tk_image)
                    self.canvas.config(scrollregion=self.canvas.bbox("all"))
            except Exception as e:
                messagebox.showerror("Error", f"No se pudo cargar el archivo: {str(e)}")
    
    def calibrate_scale(self):
        if not hasattr(self, 'image'):
            messagebox.showwarning("Advertencia", "Primero cargue una imagen")
            return
            
        response = simpledialog.askfloat("Calibración", 
                                        "Longitud conocida (mm):", 
                                        parent=self.root)
        if response:
            known_length_mm = response
            if self.line_id:
                coords = self.canvas.coords(self.line_id)
                dx = coords[2] - coords[0]
                dy = coords[3] - coords[1]
                pixel_length = math.sqrt(dx**2 + dy**2)
                self.calibration_factor = known_length_mm / pixel_length
                self.calibrated = True
                messagebox.showinfo("Calibración Exitosa", 
                                  f"Factor de calibración: {self.calibration_factor:.2f} mm/píxel")
            else:
                messagebox.showwarning("Advertencia", "Primero realice una medición")
    
    def on_press(self, event):
        self.start_x = event.x
        self.start_y = event.y
        self.line_id = self.canvas.create_line(
            self.start_x, self.start_y, event.x, event.y, fill="red", width=2)
    
    def on_drag(self, event):
        if self.line_id:
            self.canvas.coords(self.line_id, self.start_x, self.start_y, event.x, event.y)
    
    def on_release(self, event):
        if self.line_id:
            end_x, end_y = event.x, event.y
            dx = end_x - self.start_x
            dy = end_y - self.start_y
            pixel_length = math.sqrt(dx**2 + dy**2)
            real_length = pixel_length * self.calibration_factor
            
            # Preguntar por el tipo de medición
            measurement_type = simpledialog.askstring(
                "Tipo de Medición", 
                "Ingrese el nombre de la medición (ej. SIVd):", 
                parent=self.root)
            
            if measurement_type:
                # Añadir unidad según el tipo
                if "diam" in measurement_type.lower() or "dim" in measurement_type.lower():
                    unit = " (mm)"
                else:
                    unit = " (cm)"
                
                full_name = measurement_type + unit
                self.measurements[full_name] = real_length
                self.update_measurement_list()
    
    def add_measurement(self):
        name = simpledialog.askstring("Nueva Medición", "Nombre de la medición (ej. Peso):", parent=self.root)
        if name:
            value = simpledialog.askfloat("Valor", f"Ingrese el valor para {name}:", parent=self.root)
            if value is not None:
                # Añadir unidad si es necesario
                if not name.endswith((")", "]", "}")) and not any(char in name for char in "()[]{}"):
                    if "peso" in name.lower():
                        name += " (kg)"
                    elif "altura" in name.lower() or "talla" in name.lower():
                        name += " (cm)"
                
                self.measurements[name] = value
                self.update_measurement_list()
    
    def edit_measurement(self):
        selected = self.measurement_list.curselection()
        if not selected:
            return
            
        name = self.measurement_list.get(selected[0])
        current_value = self.measurements.get(name)
        
        if current_value is None:
            return
            
        new_value = simpledialog.askfloat("Editar Medición", 
                                         f"Nuevo valor para {name}:", 
                                         initialvalue=current_value,
                                         parent=self.root)
        if new_value is not None:
            self.measurements[name] = new_value
            self.update_measurement_list()
    
    def delete_measurement(self):
        selected = self.measurement_list.curselection()
        if not selected:
            return
            
        name = self.measurement_list.get(selected[0])
        if name in self.measurements:
            del self.measurements[name]
            self.update_measurement_list()
    
    def update_measurement_list(self):
        self.measurement_list.delete(0, tk.END)
        for name, value in self.measurements.items():
            self.measurement_list.insert(tk.END, f"{name}: {value:.2f}")
    
    def calculate_parameters(self):
        self.calculations.clear()
        self.calculation_list.delete(0, tk.END)
        
        for name, formula in self.formulas.items():
            try:
                result = formula()
                self.calculations[name] = result
                
                # Obtener valores normales si existen
                normal_range = self.normal_values.get(name, "")
                
                # Agregar a la lista con formato
                display_text = f"{name}: {result:.2f}"
                if normal_range:
                    display_text += f" (Normal: {normal_range})"
                
                self.calculation_list.insert(tk.END, display_text)
            except (TypeError, ZeroDivisionError) as e:
                self.calculation_list.insert(tk.END, f"{name}: Error en cálculo")
    
    def generate_report(self):
        # Generar sección de mediciones
        measurements_section = "MEDICIONES:\n"
        for name, value in self.measurements.items():
            measurements_section += f"- {name}: {value:.2f}\n"
        
        # Generar sección de cálculos
        calculations_section = "\nCÁLCULOS:\n"
        for name, value in self.calculations.items():
            calculations_section += f"- {name}: {value:.2f}\n"
        
        # Texto de hallazgos (usando tu ejemplo)
        findings_section = """
HALLAZGOS:

Ventrículo izquierdo de dimensiones y espesores parietales normales. Función sistólica conservada.
Motilidad parietal segmentaria conservada.
Patrón diastólico de flujo mitral normal.
Aurícula izquierda de dimensiones normales.
Válvula aórtica trivalva con función valvular normal.
Válvula mitral sin alteraciones morfológicas.
Válvula pulmonar: normal
Válvula tricúspide: normal
Cavidades derechas normales. Función sistólica ventrículo derecho conservada.
Tabique interauricular intacto.
Vena cava inferior de dimensiones normales y con colapso inspiratorio.
Raíz aortica y Aorta ascendente de dimensiones conservadas.
Ausencia de derrame pericárdico.

CONCLUSIÓN:
ECOCARIOGRAMA DOPPLER DENTRO DE LIMITES NORMALES.
"""
        # Construir reporte completo
        full_report = "INFORME ECOCARDIOGRÁFICO\n\n"
        full_report += measurements_section
        full_report += calculations_section
        full_report += findings_section
        
        # Mostrar en el área de texto
        self.report_text.delete(1.0, tk.END)
        self.report_text.insert(tk.END, full_report)
    
    def save_report(self):
        file_path = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Archivos de Texto", "*.txt"), ("Todos los archivos", "*.*")])
        if file_path:
            with open(file_path, "w") as f:
                f.write(self.report_text.get(1.0, tk.END))
            messagebox.showinfo("Guardado", "Reporte guardado exitosamente")
    
    def copy_to_clipboard(self):
        self.root.clipboard_clear()
        self.root.clipboard_append(self.report_text.get(1.0, tk.END))
        messagebox.showinfo("Copiado", "Reporte copiado al portapapeles")

if __name__ == "__main__":
    root = tk.Tk()
    app = EcocardioApp(root)
    root.mainloop()
